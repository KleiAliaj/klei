// Generated by ReScript, PLEASE EDIT WITH CARE

import * as T from "../T.bs.js";
import * as Font from "./shareable/Font.bs.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as WindowSizeFilter from "./WindowSizeFilter.bs.js";
import * as ResumeTimelineEntry from "./ResumeTimelineEntry.bs.js";
import * as Center$ReactMultiversal from "react-multiversal/src/Center.bs.js";
import * as Spacer$ReactMultiversal from "react-multiversal/src/Spacer.bs.js";
import * as SpacedView$ReactMultiversal from "react-multiversal/src/SpacedView.bs.js";

var imageRatio = 240 / 350;

var styles = ReactNative.StyleSheet.create({
      item: {
        flexDirection: "row",
        flexGrow: 1,
        flexShrink: 1
      }
    });

var tlSpacer = React.createElement(React.Fragment, undefined, React.createElement(Spacer$ReactMultiversal.make, {
          size: /* L */2
        }), React.createElement(WindowSizeFilter.MMin.make, {
          children: React.createElement(Spacer$ReactMultiversal.make, {
                size: /* XXL */0
              })
        }));

function ResumeTimeline(Props) {
  var items = Props.items;
  items.sort(function (a, b) {
        var aYear = Belt_Option.getWithDefault(Caml_option.null_to_opt(a.dateEnd), a.dateStart).slice(0, 4);
        var bYear = Belt_Option.getWithDefault(Caml_option.null_to_opt(b.dateEnd), b.dateStart).slice(0, 4);
        if (aYear < bYear) {
          return 1;
        } else if (aYear > bYear) {
          return -1;
        } else {
          return 0;
        }
      });
  var latestYear = {
    contents: (new Date(Date.now()).getFullYear() + 1).toFixed()
  };
  return React.createElement(SpacedView$ReactMultiversal.make, {
              vertical: /* None */7,
              horizontal: /* S */4,
              children: Belt_Array.mapWithIndex(items, (function (i, item) {
                      var year = Belt_Option.getWithDefault(Caml_option.null_to_opt(item.dateEnd), item.dateStart).slice(0, 4);
                      var newYear = year !== latestYear.contents;
                      latestYear.contents = year;
                      return React.createElement(React.Fragment, {
                                  children: null,
                                  key: item.id
                                }, newYear ? React.createElement(Center$ReactMultiversal.make, {
                                        children: React.createElement(SpacedView$ReactMultiversal.make, {
                                              children: React.createElement(ReactNative.Text, {
                                                    children: year,
                                                    style: [
                                                      Font.iosEm.title1,
                                                      T.stylesDark.text
                                                    ]
                                                  })
                                            })
                                      }) : null, React.createElement(ReactNative.View, {
                                      style: styles.item,
                                      children: null
                                    }, i % 2 === 1 ? tlSpacer : null, React.createElement(ResumeTimelineEntry.make, {
                                          item: item
                                        }), i % 2 === 0 ? tlSpacer : null));
                    }))
            });
}

var make = ResumeTimeline;

export {
  imageRatio ,
  styles ,
  tlSpacer ,
  make ,
  
}
/* styles Not a pure module */
