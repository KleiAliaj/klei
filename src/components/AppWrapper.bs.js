// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as React from "react";
import * as TabBar from "./TabBar.bs.js";
import * as AppMeta from "./AppMeta.bs.js";
import * as ReactNative from "react-native";
import * as WebsiteFooter from "./WebsiteFooter.bs.js";
import * as WebsiteHeader from "./WebsiteHeader.bs.js";
import * as WindowSizeFilter from "./WindowSizeFilter.bs.js";
import * as Style$ReactNative from "rescript-react-native/src/apis/Style.bs.js";
import * as Animated$ReactNative from "rescript-react-native/src/apis/Animated.bs.js";
import * as GradientLinearBackground from "./shareable/GradientLinearBackground.bs.js";
import * as GradientRadialBackground from "./shareable/GradientRadialBackground.bs.js";
import * as Predefined$ReactMultiversal from "react-multiversal/src/Predefined.bs.js";
import * as ReactNativeSafeAreaContext from "react-native-safe-area-context";

var scrollYAnimatedValue = new (ReactNative.Animated.Value)(0);

var requested = {
  contents: false
};

if (Predefined$ReactMultiversal.isClient) {
  var tick = function (param) {
    return Animated$ReactNative.start(Animated$ReactNative.spring(scrollYAnimatedValue, {
                    toValue: window.scrollY,
                    useNativeDriver: true
                  }), undefined, undefined);
  };
  var __x = window;
  __x.addEventListener("scroll", (function (param) {
          if (!requested.contents) {
            requested.contents = true;
            requestAnimationFrame(function (param) {
                  tick(undefined);
                  requested.contents = false;
                  
                });
            return ;
          }
          
        }));
}

var initialMetrics = {
  insets: {
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  },
  frame: {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  }
};

function AppWrapper(Props) {
  var children = Props.children;
  var windowsDims = ReactNative.useWindowDimensions();
  var moonLightSize = Caml.caml_float_min(windowsDims.width / 2, 300);
  return React.createElement(ReactNativeSafeAreaContext.SafeAreaProvider, {
              initialMetrics: initialMetrics,
              children: null
            }, React.createElement(AppMeta.make, {}), React.createElement(GradientLinearBackground.make, {
                  style: Predefined$ReactMultiversal.styles.flex1,
                  stops: [
                    {
                      offset: Style$ReactNative.pct(0),
                      stopColor: "#01093C",
                      stopOpacity: "1"
                    },
                    {
                      offset: Style$ReactNative.pct(100),
                      stopColor: "#060C4E",
                      stopOpacity: "1"
                    }
                  ],
                  children: null
                }, React.createElement(GradientRadialBackground.make, {
                      style: {
                        height: moonLightSize,
                        left: 0,
                        position: "absolute",
                        top: 0,
                        width: moonLightSize
                      },
                      stops: [
                        {
                          offset: Style$ReactNative.pct(0),
                          stopColor: "#00F6FF",
                          stopOpacity: "0.2"
                        },
                        {
                          offset: Style$ReactNative.pct(50),
                          stopColor: "#00F6FF",
                          stopOpacity: "0"
                        }
                      ]
                    }), React.createElement("div", {
                      style: {
                        background: "url(/_/stars.png) repeat 0% 0% / 400px 300px",
                        display: "flex",
                        flexDirection: "column",
                        flexGrow: "1"
                      }
                    }, React.createElement(WebsiteHeader.make, {}), children, React.createElement(WebsiteFooter.make, {}))), React.createElement(WindowSizeFilter.SMax.make, {
                  children: React.createElement(TabBar.make, {})
                }));
}

var make = AppWrapper;

export {
  scrollYAnimatedValue ,
  requested ,
  initialMetrics ,
  make ,
  
}
/* scrollYAnimatedValue Not a pure module */
