// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as ViewLink from "./ViewLink.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ButtonContainer from "./ButtonContainer.bs.js";

function LinkButton(Props) {
  var href = Props.href;
  var textSize = Props.textSize;
  var accessibilityLabel = Props.accessibilityLabel;
  var mode = Props.mode;
  var round = Props.round;
  var horizontalSpace = Props.horizontalSpace;
  var verticalSpace = Props.verticalSpace;
  var style = Props.style;
  var color = Props.color;
  var color2 = Props.color2;
  var activityIndicator = Props.activityIndicator;
  var children = Props.children;
  var tmp = {
    children: children
  };
  if (textSize !== undefined) {
    tmp.textSize = Caml_option.valFromOption(textSize);
  }
  if (accessibilityLabel !== undefined) {
    tmp.accessibilityLabel = Caml_option.valFromOption(accessibilityLabel);
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (round !== undefined) {
    tmp.round = Caml_option.valFromOption(round);
  }
  if (horizontalSpace !== undefined) {
    tmp.horizontalSpace = Caml_option.valFromOption(horizontalSpace);
  }
  if (verticalSpace !== undefined) {
    tmp.verticalSpace = Caml_option.valFromOption(verticalSpace);
  }
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  if (color !== undefined) {
    tmp.color = Caml_option.valFromOption(color);
  }
  if (color2 !== undefined) {
    tmp.color2 = Caml_option.valFromOption(color2);
  }
  if (activityIndicator !== undefined) {
    tmp.activityIndicator = Caml_option.valFromOption(activityIndicator);
  }
  return React.createElement(ViewLink.make, {
              href: href,
              children: React.createElement(ButtonContainer.make, tmp)
            });
}

var make = LinkButton;

export {
  make ,
  
}
/* react Not a pure module */
