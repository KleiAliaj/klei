// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Consts from "../Consts.bs.js";
import * as DateFns from "date-fns";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as SVGExternalLink from "../../assets/SVGs/components/SVGExternalLink.bs.js";
import * as UnderlinedTextLink from "./UnderlinedTextLink.bs.js";
import * as Spacer$ReactMultiversal from "react-multiversal/src/Spacer.bs.js";
import * as Predefined$ReactMultiversal from "react-multiversal/src/Predefined.bs.js";
import * as SpacedView$ReactMultiversal from "react-multiversal/src/SpacedView.bs.js";
import * as ImageWithAspectRatio$ReactMultiversal from "react-multiversal/src/ImageWithAspectRatio.bs.js";

var styles = ReactNative.StyleSheet.create({
      wrapper: {
        flexGrow: 1,
        flexShrink: 1
      },
      container: {
        backgroundColor: Consts.Colors.lightest,
        borderRadius: 10,
        shadowColor: "#000",
        shadowOffset: {
          height: 5,
          width: 0
        },
        shadowOpacity: 0.15,
        shadowRadius: 30,
        flexGrow: 1,
        flexShrink: 1
      },
      imageWrapper: {
        borderTopLeftRadius: 10,
        borderTopRightRadius: 10,
        overflow: "hidden"
      },
      title: {
        color: "#888",
        fontSize: 14,
        fontWeight: "500"
      },
      company: {
        color: "#333",
        fontSize: 16,
        fontWeight: "100"
      },
      description: {
        fontSize: 24,
        fontWeight: "700",
        flexShrink: 1,
        overflow: "hidden"
      },
      duration: {
        color: "#666",
        fontSize: 14,
        fontWeight: "300"
      },
      links: {
        flex: 1,
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "flex-end"
      },
      link: {
        color: Consts.Colors.dark,
        fontSize: 14,
        fontWeight: "200",
        alignItems: "flex-end",
        display: "flex",
        justifyContent: "center"
      },
      tags: {
        flex: 1,
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "flex-end"
      },
      tag: {
        color: Consts.Colors.dark,
        fontSize: 14,
        fontWeight: "300"
      }
    });

function ResumeTimelineEntry(Props) {
  var item = Props.item;
  var links = Belt_Option.getWithDefault(Caml_option.null_to_opt(item.links), []);
  return React.createElement(SpacedView$ReactMultiversal.make, {
              horizontal: /* None */7,
              style: styles.wrapper,
              children: React.createElement(ReactNative.View, {
                    style: styles.container,
                    children: null
                  }, Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(item.image), (function (image) {
                              return React.createElement(ReactNative.View, {
                                          style: styles.imageWrapper,
                                          children: React.createElement(ImageWithAspectRatio$ReactMultiversal.make, {
                                                uri: image,
                                                ratio: 2160 / 3840
                                              })
                                        });
                            })), null), React.createElement(SpacedView$ReactMultiversal.make, {
                        style: Predefined$ReactMultiversal.styles.flexGrow,
                        children: null
                      }, React.createElement(ReactNative.View, {
                            style: Predefined$ReactMultiversal.styles.rowWrapSpaceBetween,
                            children: null
                          }, React.createElement(ReactNative.Text, {
                                children: item.title.toUpperCase(),
                                style: styles.title
                              }), Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(item.url), (function (url) {
                                      return React.createElement(UnderlinedTextLink.make, {
                                                  href: url,
                                                  style: styles.company,
                                                  children: Belt_Option.getWithDefault(Caml_option.null_to_opt(item.company), "")
                                                });
                                    })), null)), React.createElement(Spacer$ReactMultiversal.make, {
                            size: /* XS */5
                          }), React.createElement(ReactNative.Text, {
                            children: Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(item.description), (function (prim) {
                                        return prim;
                                      })), null),
                            style: styles.description
                          }), Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(item.dateEnd), (function (dateEnd) {
                                  var durationInMonths = DateFns.differenceInCalendarMonths(new Date(dateEnd), new Date(item.dateStart)) | 0;
                                  var durationYears = durationInMonths / 12 | 0;
                                  var durationMonths = durationInMonths % 12;
                                  return React.createElement(React.Fragment, undefined, React.createElement(Spacer$ReactMultiversal.make, {
                                                  size: /* XS */5
                                                }), React.createElement(ReactNative.Text, {
                                                  children: (
                                                    durationYears !== 0 ? (
                                                        durationYears !== 1 ? String(durationYears) + " years " : "1 year "
                                                      ) : ""
                                                  ) + (
                                                    durationMonths !== 0 ? (
                                                        durationMonths !== 1 ? String(durationMonths) + " months " : "1 month "
                                                      ) : ""
                                                  ),
                                                  style: styles.duration
                                                }));
                                })), null), React.createElement(Spacer$ReactMultiversal.make, {
                            size: /* XL */1
                          }), React.createElement(ReactNative.View, {
                            style: styles.tags,
                            children: Belt_Array.map(item.hashtags, (function (t) {
                                    return React.createElement(ReactNative.Text, {
                                                children: " #" + t,
                                                style: styles.tag,
                                                key: t
                                              });
                                  }))
                          }), links.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement(Spacer$ReactMultiversal.make, {
                                  size: /* L */2
                                }), React.createElement(ReactNative.View, {
                                  style: styles.links,
                                  children: Belt_Array.map(links, (function (link) {
                                          return React.createElement(React.Fragment, {
                                                      children: null,
                                                      key: link.title
                                                    }, React.createElement(Spacer$ReactMultiversal.make, {
                                                          size: /* XS */5
                                                        }), React.createElement(UnderlinedTextLink.make, {
                                                          href: link.url,
                                                          style: styles.link,
                                                          children: null,
                                                          key: link.title
                                                        }, link.title, React.createElement(Spacer$ReactMultiversal.make, {
                                                              size: /* XXS */6
                                                            }), React.createElement(SVGExternalLink.make, {})));
                                        }))
                                })) : null)),
              key: item.id
            });
}

var make = ResumeTimelineEntry;

export {
  styles ,
  make ,
  
}
/* styles Not a pure module */
