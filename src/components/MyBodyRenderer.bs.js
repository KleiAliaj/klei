// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Html from "./Html.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Buffer from "rescript/lib/es6/buffer.js";
import * as $$String from "rescript/lib/es6/string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function jsTreeToReason(jsChild) {
  var match = (Object.prototype.toString.call(jsChild));
  switch (match) {
    case "[object Object]" :
        var tag = String(jsChild.tag);
        var props = jsChild.props;
        var c = jsChild.children;
        var children = c !== undefined ? Belt_Array.map(c, jsTreeToReason) : [];
        return {
                TAG: /* Element */1,
                _0: tag,
                _1: props,
                _2: children
              };
    case "[object String]" :
        return {
                TAG: /* String */0,
                _0: String(jsChild)
              };
    default:
      return /* Empty */0;
  }
}

function stringMapPartial(s, f) {
  var b = $$Buffer.create(s.length);
  $$String.iter((function (c) {
          var c$p = Curry._1(f, c);
          if (c$p !== undefined) {
            return $$Buffer.add_char(b, c$p);
          }
          
        }), s);
  return $$Buffer.contents(b);
}

function cleanupNewlines(s) {
  return stringMapPartial(s, (function ($$char) {
                if ($$char === /* '\n' */10) {
                  return /* ' ' */32;
                } else {
                  return $$char;
                }
              }));
}

function optionalCleanString(s, keepNewlines) {
  var sc = keepNewlines ? s : cleanupNewlines(s);
  if (sc === "" || sc === " " && s !== sc) {
    return ;
  } else {
    return sc;
  }
}

var keepNewlines = {
  contents: false
};

function inlineBreakIfParentIsInline(parentTag) {
  if (parentTag === "li") {
    return React.createElement(Html.Br.make, {});
  } else {
    return null;
  }
}

function renderChild(keepNewlinesOpt, parentTag, index, child) {
  var keepNewlines = keepNewlinesOpt !== undefined ? keepNewlinesOpt : false;
  var key = String(index);
  var renderChildren = function (keepNewlines, parentTag, children) {
    if (children.length === 0) {
      return null;
    }
    var partial_arg = keepNewlines;
    return Belt_Array.mapWithIndex(children, (function (param, param$1) {
                  return renderChild(partial_arg, parentTag, param, param$1);
                }));
  };
  if (typeof child === "number") {
    return null;
  }
  if (child.TAG === /* String */0) {
    var string = child._0;
    switch (parentTag) {
      case "li" :
          return Belt_Option.getWithDefault(Belt_Option.map(optionalCleanString(string, keepNewlines), (function (s) {
                            return React.createElement(Html.TextNode.make, {
                                        children: s
                                      });
                          })), null);
      case "ol" :
      case "ul" :
          return null;
      default:
        return Belt_Option.getWithDefault(Belt_Option.map(optionalCleanString(string, keepNewlines), (function (prim) {
                          return prim;
                        })), null);
    }
  } else {
    var children = child._2;
    var tag = child._0;
    var props = Belt_Option.map(child._1, (function (props) {
            return {
                    allowFullScreen: props.allowfullscreen,
                    className: props.class,
                    dateTime: props.datetime,
                    htmlFor: props.for,
                    frameBorder: props.frameborder,
                    href: props.href,
                    id: props.id,
                    name: props.name,
                    src: props.src
                  };
          }));
    switch (tag) {
      case "a" :
          var tmp = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.A.make, tmp);
      case "blockquote" :
          return React.createElement(Html.BlockQuote.make, {
                      children: renderChildren(keepNewlines, tag, children),
                      key: key
                    });
      case "br" :
          return React.createElement(Html.Br.make, {
                      key: key
                    });
      case "code" :
          if (parentTag !== "pre") {
            return React.createElement(Html.Code.make, {
                        children: renderChildren(keepNewlines, tag, children),
                        key: key
                      });
          }
          var tmp$1 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$1.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.CodeBlock.make, tmp$1);
      case "h1" :
          var tmp$2 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$2.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H1.make, tmp$2);
      case "h2" :
          var tmp$3 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$3.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H2.make, tmp$3);
      case "h3" :
          var tmp$4 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$4.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H3.make, tmp$4);
      case "h4" :
          var tmp$5 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$5.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H4.make, tmp$5);
      case "h5" :
          var tmp$6 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$6.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H5.make, tmp$6);
      case "h6" :
          var tmp$7 = {
            children: renderChildren(keepNewlines, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$7.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.H6.make, tmp$7);
      case "hr" :
          return React.createElement(Html.Hr.make, {
                      key: key
                    });
      case "img" :
          var tmp$8 = {
            key: key
          };
          if (props !== undefined) {
            tmp$8.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.$$Image.make, tmp$8);
      case "li" :
          return React.createElement(Html.Li.make, {
                      children: renderChildren(keepNewlines, tag, children),
                      key: key
                    });
      case "p" :
          return React.createElement(Html.P.make, {
                      children: renderChildren(keepNewlines, tag, children),
                      key: key
                    });
      case "pre" :
          var tmp$9 = {
            children: renderChildren(true, tag, children),
            key: key
          };
          if (props !== undefined) {
            tmp$9.props = Caml_option.valFromOption(props);
          }
          return React.createElement(Html.Pre.make, tmp$9);
      case "ol" :
      case "ul" :
          break;
      default:
        return React.createElement(tag, Belt_Option.getWithDefault(Belt_Option.map(props, (function (props) {
                              return Object.assign(Object.assign({}, props), {
                                          key: key
                                        });
                            })), {
                        key: key
                      }), renderChildren(keepNewlines, tag, children));
    }
    return React.createElement(React.Fragment, undefined, inlineBreakIfParentIsInline(parentTag), React.createElement(Html.Ul.make, {
                    children: renderChildren(keepNewlines, tag, children),
                    key: key
                  }));
  }
}

function MyBodyRenderer(Props) {
  var body = Props.body;
  var renderChildOpt = Props.renderChild;
  var renderChild$1 = renderChildOpt !== undefined ? renderChildOpt : renderChild;
  var tree = jsTreeToReason(body);
  return React.createElement(React.Fragment, undefined, Curry._4(renderChild$1, undefined, "", 0, tree));
}

var make = MyBodyRenderer;

export {
  jsTreeToReason ,
  stringMapPartial ,
  cleanupNewlines ,
  optionalCleanString ,
  keepNewlines ,
  inlineBreakIfParentIsInline ,
  renderChild ,
  make ,
  
}
/* Html Not a pure module */
