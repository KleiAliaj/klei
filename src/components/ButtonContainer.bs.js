// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as SpacedView$ReactMultiversal from "react-multiversal/src/SpacedView.bs.js";

var styles = ReactNative.StyleSheet.create({
      container: {
        borderRadius: 6,
        borderWidth: 1,
        alignItems: "center",
        justifyContent: "center"
      },
      rounded: {
        borderRadius: 100
      },
      activityIndicatorContainer: {
        alignItems: "center",
        bottom: 0,
        justifyContent: "center",
        left: 0,
        position: "absolute",
        right: 0,
        top: 0,
        zIndex: 1
      }
    });

function ButtonContainer(Props) {
  var textSizeOpt = Props.textSize;
  var accessibilityLabel = Props.accessibilityLabel;
  var modeOpt = Props.mode;
  var roundOpt = Props.round;
  var horizontalOpt = Props.horizontalSpace;
  var verticalOpt = Props.verticalSpace;
  var s = Props.style;
  var c1Opt = Props.color;
  var c2Opt = Props.color2;
  var activityIndicatorOpt = Props.activityIndicator;
  var children = Props.children;
  var textSize = textSizeOpt !== undefined ? textSizeOpt : 16;
  var mode = modeOpt !== undefined ? modeOpt : /* Contained */0;
  var round = roundOpt !== undefined ? roundOpt : false;
  var horizontal = horizontalOpt !== undefined ? horizontalOpt : /* M */3;
  var vertical = verticalOpt !== undefined ? verticalOpt : /* S */4;
  var c1 = c1Opt !== undefined ? c1Opt : "black";
  var c2 = c2Opt !== undefined ? c2Opt : "white";
  var activityIndicator = activityIndicatorOpt !== undefined ? activityIndicatorOpt : false;
  var tmp;
  switch (mode) {
    case /* Contained */0 :
        tmp = [
          styles.container,
          {
            backgroundColor: c1,
            borderColor: c1
          }
        ];
        break;
    case /* ContainedInverted */1 :
        tmp = [
          styles.container,
          {
            backgroundColor: c1,
            borderColor: "transparent"
          }
        ];
        break;
    case /* Outlined */2 :
        tmp = [
          styles.container,
          {
            backgroundColor: c2,
            borderColor: c1
          }
        ];
        break;
    
  }
  var tmp$1;
  switch (mode) {
    case /* Contained */0 :
        tmp$1 = {
          color: c2,
          fontSize: textSize,
          fontWeight: "600"
        };
        break;
    case /* ContainedInverted */1 :
        tmp$1 = {
          color: c1,
          fontSize: textSize,
          fontWeight: "600"
        };
        break;
    case /* Outlined */2 :
        tmp$1 = {
          color: c1,
          fontSize: textSize,
          fontWeight: "400"
        };
        break;
    
  }
  var tmp$2 = {
    style: [
      Caml_option.some(tmp),
      round ? Caml_option.some(styles.rounded) : undefined,
      s
    ],
    children: React.createElement(SpacedView$ReactMultiversal.make, {
          vertical: vertical,
          horizontal: horizontal,
          children: null
        }, activityIndicator ? React.createElement(ReactNative.View, {
                style: styles.activityIndicatorContainer,
                children: React.createElement(ReactNative.ActivityIndicator, {
                      color: mode !== 0 ? c1 : c2,
                      size: "small"
                    })
              }) : null, React.createElement(ReactNative.Text, {
              children: children,
              style: [
                tmp$1,
                {
                  opacity: activityIndicator ? 0 : 1
                }
              ]
            }))
  };
  if (accessibilityLabel !== undefined) {
    tmp$2.accessibilityLabel = accessibilityLabel;
  }
  return React.createElement(ReactNative.View, tmp$2);
}

var make = ButtonContainer;

export {
  styles ,
  make ,
  
}
/* styles Not a pure module */
