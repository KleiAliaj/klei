// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as TextLink from "./TextLink.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as Predefined$ReactMultiversal from "react-multiversal/src/Predefined.bs.js";
import * as ImageFromUri$ReactMultiversal from "react-multiversal/src/ImageFromUri.bs.js";

var lightGrey = Predefined$ReactMultiversal.Colors.lightGrey;

var blue = Predefined$ReactMultiversal.Colors.Ios.light.blue;

var purple = Predefined$ReactMultiversal.Colors.Ios.light.purple;

var styles = ReactNative.StyleSheet.create({
      aText: {
        color: blue,
        textDecorationLine: "underline"
      },
      h1: {
        marginBottom: 24,
        marginTop: 42
      },
      h1Text: {
        fontSize: 42,
        fontWeight: "800"
      },
      h2: {
        marginBottom: 18,
        marginTop: 34
      },
      h2Text: {
        fontSize: 34,
        fontWeight: "800"
      },
      h3: {
        marginBottom: 13,
        marginTop: 26
      },
      h3Text: {
        fontSize: 26,
        fontWeight: "800"
      },
      h4: {
        marginBottom: 12,
        marginTop: 24
      },
      h4Text: {
        fontSize: 24,
        fontWeight: "700"
      },
      h5: {
        marginBottom: 11,
        marginTop: 22
      },
      h5Text: {
        fontSize: 22,
        fontWeight: "700"
      },
      h6: {
        marginBottom: 11,
        marginTop: 22
      },
      h6Text: {
        fontSize: 22,
        fontWeight: "700"
      },
      p: {
        marginBottom: 20
      },
      text: {
        fontSize: 18,
        fontWeight: "300",
        lineHeight: 18 * 1.65
      },
      ul: {
        marginBottom: 29
      },
      li: {},
      liWrapper: {
        flexDirection: "row"
      },
      liBullet: {
        alignSelf: "flex-start",
        paddingHorizontal: 10
      },
      blockQuote: {
        borderLeftColor: "#9ca0a3",
        borderLeftWidth: 3,
        marginBottom: 29,
        paddingHorizontal: 20,
        paddingTop: 29
      },
      blockQuoteText: {
        color: "#515355",
        fontSize: 24,
        fontWeight: "300",
        lineHeight: 32
      },
      pre: {
        marginBottom: 20,
        marginTop: 0
      },
      codeBlock: {},
      codeText: {
        backgroundColor: lightGrey,
        borderRadius: 2,
        paddingHorizontal: 4
      },
      hr: {
        backgroundColor: "#eee",
        height: 4,
        marginHorizontal: 20,
        marginVertical: 40
      }
    });

function Html$A(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(TextLink.make, {
              children: children,
              href: props.href,
              style: [
                Caml_option.some(styles.aText),
                styl
              ]
            });
}

var A = {
  make: Html$A
};

function Html$H1(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h1),
                styl
              ],
              children: React.createElement("h1", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h1Text),
                          textStyl
                        ]
                      }))
            });
}

var H1 = {
  make: Html$H1
};

function Html$H2(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h2),
                styl
              ],
              children: React.createElement("h2", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h2Text),
                          textStyl
                        ]
                      }))
            });
}

var H2 = {
  make: Html$H2
};

function Html$H3(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h3),
                styl
              ],
              children: React.createElement("h3", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h3Text),
                          textStyl
                        ]
                      }))
            });
}

var H3 = {
  make: Html$H3
};

function Html$H4(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h4),
                styl
              ],
              children: React.createElement("h4", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h4Text),
                          textStyl
                        ]
                      }))
            });
}

var H4 = {
  make: Html$H4
};

function Html$H5(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h5),
                styl
              ],
              children: React.createElement("h5", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h5Text),
                          textStyl
                        ]
                      }))
            });
}

var H5 = {
  make: Html$H5
};

function Html$H6(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.h6),
                styl
              ],
              children: React.createElement("h6", {
                    id: props.id
                  }, React.createElement(ReactNative.Text, {
                        children: children,
                        style: [
                          Caml_option.some(styles.h6Text),
                          textStyl
                        ]
                      }))
            });
}

var H6 = {
  make: Html$H6
};

function Html$P(Props) {
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.p),
                styl
              ],
              children: React.createElement(ReactNative.Text, {
                    children: React.createElement("p", undefined, children),
                    style: [
                      Caml_option.some(styles.text),
                      textStyl
                    ]
                  })
            });
}

var P = {
  make: Html$P
};

function Html$TextNode(Props) {
  var styl = Props.style;
  var children = Props.children;
  return React.createElement(ReactNative.Text, {
              children: children,
              style: [
                Caml_option.some(styles.text),
                styl
              ]
            });
}

var TextNode = {
  make: Html$TextNode
};

function Html$Image(Props) {
  var propsOpt = Props.props;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  if (ReactNative.Platform.OS === "web") {
    return ReactNative.unstable_createElement("img", {
                src: props.src,
                className: props.className
              });
  } else {
    return React.createElement(ImageFromUri$ReactMultiversal.make, {
                uri: props.src
              });
  }
}

var $$Image = {
  make: Html$Image
};

function Html$Ul(Props) {
  var styl = Props.style;
  var children = Props.children;
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.ul),
                styl
              ],
              children: children
            });
}

var Ul = {
  make: Html$Ul
};

function Html$Li(Props) {
  var styl = Props.style;
  var bulletOpt = Props.bullet;
  var children = Props.children;
  var bullet = bulletOpt !== undefined ? bulletOpt : "â€¢";
  return React.createElement(ReactNative.View, {
              style: styles.liWrapper,
              children: null
            }, React.createElement(ReactNative.Text, {
                  children: bullet,
                  style: [
                    styles.text,
                    styles.liBullet
                  ]
                }), React.createElement(ReactNative.Text, {
                  children: React.createElement("p", undefined, children),
                  style: [
                    Caml_option.some(styles.li),
                    Caml_option.some(styles.text),
                    styl
                  ]
                }));
}

var Li = {
  make: Html$Li
};

function Html$BlockQuote(Props) {
  var styl = Props.style;
  var textStyl = Props.textStyle;
  var children = Props.children;
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.blockQuote),
                styl
              ],
              children: React.createElement(ReactNative.Text, {
                    children: React.createElement("blockquote", undefined, children),
                    style: [
                      Caml_option.some(styles.blockQuoteText),
                      textStyl
                    ]
                  })
            });
}

var BlockQuote = {
  make: Html$BlockQuote
};

function Html$Pre(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.pre),
                styl
              ],
              children: React.createElement("pre", props, children)
            });
}

var Pre = {
  make: Html$Pre
};

function Html$CodeBlock(Props) {
  var propsOpt = Props.props;
  var styl = Props.style;
  var children = Props.children;
  var props = propsOpt !== undefined ? Caml_option.valFromOption(propsOpt) : ({});
  return React.createElement(ReactNative.View, {
              style: [
                Caml_option.some(styles.codeBlock),
                styl
              ],
              children: React.createElement("code", props, children)
            });
}

var CodeBlock = {
  make: Html$CodeBlock
};

function Html$Code(Props) {
  var styl = Props.style;
  var children = Props.children;
  return React.createElement(ReactNative.Text, {
              children: React.createElement("code", {}, children),
              style: [
                Caml_option.some(styles.codeText),
                styl
              ]
            });
}

var Code = {
  make: Html$Code
};

function Html$Br(Props) {
  return React.createElement(ReactNative.Text, {
              children: "\n"
            });
}

var Br = {
  make: Html$Br
};

function Html$Hr(Props) {
  return React.createElement(ReactNative.View, {
              style: styles.hr
            });
}

var Hr = {
  make: Html$Hr
};

export {
  lightGrey ,
  blue ,
  purple ,
  styles ,
  A ,
  H1 ,
  H2 ,
  H3 ,
  H4 ,
  H5 ,
  H6 ,
  P ,
  TextNode ,
  $$Image ,
  Ul ,
  Li ,
  BlockQuote ,
  Pre ,
  CodeBlock ,
  Code ,
  Br ,
  Hr ,
  
}
/* styles Not a pure module */
