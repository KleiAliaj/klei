// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_null from "rescript/lib/es6/js_null.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function decode(id, rawJson) {
  var data;
  try {
    data = {
      body: Js_null.fromOption(Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(rawJson), (function (json) {
                          return Js_dict.get(json, "body");
                        })), Js_json.decodeObject), (function (body) {
                  return body;
                }))),
      company: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("company", Json_decode.string, param);
                }), rawJson)),
      dateEnd: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("dateEnd", Json_decode.string, param);
                }), rawJson)),
      dateStart: Json_decode.field("dateStart", Json_decode.string, rawJson),
      description: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("description", Json_decode.string, param);
                }), rawJson)),
      hashtags: Json_decode.field("hashtags", (function (param) {
              return Json_decode.array(Json_decode.string, param);
            }), rawJson),
      id: id,
      image: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("image", Json_decode.string, param);
                }), rawJson)),
      links: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("links", (function (param) {
                                return Json_decode.array((function (json) {
                                              return {
                                                      title: Json_decode.field("title", Json_decode.string, json),
                                                      url: Json_decode.field("url", Json_decode.string, json)
                                                    };
                                            }), param);
                              }), param);
                }), rawJson)),
      title: Json_decode.field("title", Json_decode.string, rawJson),
      url: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("url", Json_decode.string, param);
                }), rawJson))
    };
  }
  catch (raw_str){
    var str = Caml_js_exceptions.internalToOCamlException(raw_str);
    if (str.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: str._1
            };
    }
    throw str;
  }
  return {
          TAG: /* Ok */0,
          _0: data
        };
}

function orderByDate(posts) {
  return posts.slice().sort(function (a, b) {
              var aV = a.dateStart;
              var bV = b.dateStart;
              if (aV === bV) {
                return 0;
              } else if (aV > bV) {
                return -1;
              } else {
                return 1;
              }
            });
}

export {
  decode ,
  orderByDate ,
  
}
/* No side effect */
