// Generated by ReScript, PLEASE EDIT WITH CARE

import * as T from "../T.bs.js";
import * as Html from "../components/Html.bs.js";
import * as React from "react";
import * as Consts from "../Consts.bs.js";
import Head from "next/head";
import * as AppWrapper from "../components/AppWrapper.bs.js";
import * as BackendApi from "../BackendApi.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as BlogFrontend from "../BlogFrontend.bs.js";
import * as ReactNative from "react-native";
import * as MyBodyRenderer from "../components/MyBodyRenderer.bs.js";
import ReactDisqusComments from "react-disqus-comments";
import * as Spacer$ReactMultiversal from "react-multiversal/src/Spacer.bs.js";
import * as Container$ReactMultiversal from "react-multiversal/src/Container.bs.js";
import * as SpacedView$ReactMultiversal from "react-multiversal/src/SpacedView.bs.js";

var Malformed = {};

var styles = ReactNative.StyleSheet.create({
      title: {
        color: Consts.Colors.dark
      },
      text: {
        fontSize: 21,
        fontWeight: "400",
        lineHeight: 33
      }
    });

function PageBlogPost(Props) {
  var post = Props.post;
  if (post.TAG !== /* Ok */0) {
    return post._0.message;
  }
  var post$1 = post._0;
  var title = Belt_Option.getWithDefault(Caml_option.null_to_opt(post$1.title), "");
  return React.createElement(AppWrapper.make, {
              children: null
            }, React.createElement(Head, {
                  children: React.createElement("title", undefined, title)
                }), React.createElement(ReactNative.View, {
                  style: T.stylesLight.back,
                  children: React.createElement(Container$ReactMultiversal.make, {
                        children: React.createElement(SpacedView$ReactMultiversal.make, {
                              vertical: /* None */7,
                              children: null
                            }, React.createElement(Html.H1.make, {
                                  textStyle: styles.title,
                                  children: title
                                }), Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(post$1.body), (function (body) {
                                        return React.createElement(MyBodyRenderer.make, {
                                                    body: body
                                                  });
                                      })), null), React.createElement(Spacer$ReactMultiversal.make, {
                                  size: /* XXL */0
                                }), React.createElement(ReactDisqusComments, {
                                  shortname: "moox",
                                  identifier: "http://moox.io/blog/" + (post$1.id + "/"),
                                  url: "http://moox.io/blog/" + (post$1.id + "/")
                                }), React.createElement(Spacer$ReactMultiversal.make, {
                                  size: /* L */2
                                }))
                      })
                }));
}

function $$default(props) {
  return PageBlogPost({
              post: props.post
            });
}

function getStaticProps(ctx) {
  var params = ctx.params;
  var postData = BackendApi.getOne(params.slug + ".json", "blog");
  var tmp;
  if (postData !== undefined) {
    var __x = postData.json;
    var decoded = BlogFrontend.decode(postData.slug, __x);
    tmp = decoded.TAG === /* Ok */0 ? ({
          TAG: /* Ok */0,
          _0: decoded._0
        }) : ({
          TAG: /* Error */1,
          _0: {
            id: params.slug,
            message: "Malformed post: " + decoded._0
          }
        });
  } else {
    tmp = {
      TAG: /* Error */1,
      _0: {
        id: params.slug,
        message: "Post does not exist"
      }
    };
  }
  var props = {
    post: tmp
  };
  return Promise.resolve({
              props: props
            });
}

function getStaticPaths(param) {
  var paths = Belt_Array.map(BackendApi.getAll("blog"), (function (postData) {
          return {
                  params: {
                    slug: postData.slug
                  }
                };
        }));
  return Promise.resolve({
              paths: paths,
              fallback: false
            });
}

var make = PageBlogPost;

export {
  Malformed ,
  styles ,
  make ,
  $$default ,
  $$default as default,
  getStaticProps ,
  getStaticPaths ,
  
}
/* styles Not a pure module */
