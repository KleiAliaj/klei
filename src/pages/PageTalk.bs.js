// Generated by ReScript, PLEASE EDIT WITH CARE

import * as T from "../T.bs.js";
import * as Html from "../components/Html.bs.js";
import * as React from "react";
import * as Consts from "../Consts.bs.js";
import Head from "next/head";
import * as AppWrapper from "../components/AppWrapper.bs.js";
import * as BackendApi from "../BackendApi.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as TalksFrontend from "../TalksFrontend.bs.js";
import * as MyBodyRenderer from "../components/MyBodyRenderer.bs.js";
import * as Spacer$ReactMultiversal from "react-multiversal/src/Spacer.bs.js";
import * as Container$ReactMultiversal from "react-multiversal/src/Container.bs.js";
import * as SpacedView$ReactMultiversal from "react-multiversal/src/SpacedView.bs.js";

var Malformed = {};

var styles = ReactNative.StyleSheet.create({
      title: {
        color: Consts.Colors.dark
      },
      text: {
        fontSize: 21,
        fontWeight: "400",
        lineHeight: 33
      }
    });

function PageTalk(Props) {
  var item = Props.item;
  if (item.TAG !== /* Ok */0) {
    return item._0.message;
  }
  var item$1 = item._0;
  var videoEmbed = item$1.videoEmbed;
  var slidesEmbed = item$1.slidesEmbed;
  var slides = item$1.slides;
  return React.createElement(AppWrapper.make, {
              children: React.createElement(ReactNative.View, {
                    style: T.stylesLight.back,
                    children: React.createElement(Container$ReactMultiversal.make, {
                          children: null
                        }, React.createElement(Head, {
                              children: React.createElement("title", undefined, item$1.title)
                            }), React.createElement(SpacedView$ReactMultiversal.make, {
                              vertical: /* None */7,
                              children: null
                            }, React.createElement(Html.H1.make, {
                                  textStyle: styles.title,
                                  children: item$1.title
                                }), React.createElement(Spacer$ReactMultiversal.make, {
                                  size: /* L */2
                                }), videoEmbed !== null ? React.createElement(ReactNative.View, {
                                    children: null
                                  }, React.createElement("div", {
                                        style: {
                                          overflow: "hidden",
                                          paddingBottom: "56.2502460948%",
                                          position: "relative"
                                        }
                                      }, React.createElement("iframe", {
                                            style: {
                                              height: "100%",
                                              left: "0",
                                              position: "absolute",
                                              top: "0",
                                              width: "100%"
                                            },
                                            allowFullScreen: true,
                                            src: videoEmbed
                                          })), React.createElement(Spacer$ReactMultiversal.make, {})) : null, slidesEmbed !== null ? React.createElement(ReactNative.View, {
                                    children: null
                                  }, React.createElement("div", {
                                        style: {
                                          overflow: "hidden",
                                          paddingBottom: "56.2502460948%",
                                          position: "relative"
                                        }
                                      }, React.createElement("iframe", {
                                            style: {
                                              height: "100%",
                                              left: "0",
                                              position: "absolute",
                                              top: "0",
                                              width: "100%"
                                            },
                                            allowFullScreen: true,
                                            src: slidesEmbed
                                          })), React.createElement(Spacer$ReactMultiversal.make, {})) : null, slides !== null ? React.createElement(SpacedView$ReactMultiversal.make, {
                                    children: React.createElement("a", {
                                          href: slides
                                        }, slides)
                                  }) : null, Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(item$1.body), (function (body) {
                                        return React.createElement(MyBodyRenderer.make, {
                                                    body: body
                                                  });
                                      })), null), React.createElement(Spacer$ReactMultiversal.make, {
                                  size: /* L */2
                                })))
                  })
            });
}

function $$default(props) {
  return PageTalk({
              item: props.item
            });
}

function getStaticProps(ctx) {
  var params = ctx.params;
  var itemData = BackendApi.getOne(params.slug + ".json", "talks");
  var tmp;
  if (itemData !== undefined) {
    var __x = itemData.json;
    var decoded = TalksFrontend.decode(itemData.slug, __x);
    tmp = decoded.TAG === /* Ok */0 ? ({
          TAG: /* Ok */0,
          _0: decoded._0
        }) : ({
          TAG: /* Error */1,
          _0: {
            id: params.slug,
            message: "Malformed item: " + decoded._0
          }
        });
  } else {
    tmp = {
      TAG: /* Error */1,
      _0: {
        id: params.slug,
        message: "Post does not exist"
      }
    };
  }
  var props = {
    item: tmp
  };
  return Promise.resolve({
              props: props
            });
}

function getStaticPaths(param) {
  var paths = Belt_Array.map(BackendApi.getAll("talks"), (function (itemData) {
          return {
                  params: {
                    slug: itemData.slug
                  }
                };
        }));
  return Promise.resolve({
              paths: paths,
              fallback: false
            });
}

var make = PageTalk;

export {
  Malformed ,
  styles ,
  make ,
  $$default ,
  $$default as default,
  getStaticProps ,
  getStaticPaths ,
  
}
/* styles Not a pure module */
