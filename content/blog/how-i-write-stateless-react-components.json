{"title":"How I write React stateless functional components","headings":[{"level":2,"text":"tl;dr","id":"tldr"},{"level":2,"text":"function","id":"function"},{"level":2,"text":"Destructured props","id":"destructured-props"},{"level":2,"text":"Classes","id":"classes"},{"level":2,"text":"No return","id":"no-return"}],"date":"2018-05-23T00:00:00.000Z","tags":["react","javascript"],"body":{"tag":"div","children":[{"tag":"p","children":["This article have been inspired by this spectrum thread\n",{"tag":"a","props":{"href":"https://spectrum.chat/thread/91f98b74-a6b0-44ea-807f-372695da6926"},"children":["How do you write your functional components?"]},"\nand the\n",{"tag":"a","props":{"href":"https://twitter.com/mxstbr/status/996653187481460736"},"children":["following twitter thread"]},"."]},"\n",{"tag":"p","children":[{"tag":"strong","children":["This post is certainly a personal preference"]}," and clearly, it doesn’t really\nmatter at the end of the day and won’t affect runtime performance. However let\nme tell you how I like to write my stateless components and why (because that’s\nthe interesting part)."]},"\n",{"tag":"h2","props":{"id":"tldr"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#tldr"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"tl;dr"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["props"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n};"]}]},"\n",{"tag":"p","children":[{"tag":"strong","children":["Note about code formatting"]},": I don’t want to think about it ever again. If\nyou do write JavaScript, stop bikeshedding and just use\n",{"tag":"a","props":{"href":"http://prettier.io"},"children":["prettier"]},"!"]},"\n",{"tag":"p","children":["Back to the component. Why this style?"]},"\n",{"tag":"p","children":["Let’s compare to alternatives."]},"\n",{"tag":"h2","props":{"id":"function"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#function"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},{"tag":"code","children":["function"]}]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["function"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Name"]},"(",{"tag":"span","props":{"class":"hljs-params"},"children":["props"]},") "]},"{\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n}"]}]},"\n",{"tag":"p","children":["Here no big changes, we use a named function instead of arrow function, that’s\nok too. First win is that you can directly export the function"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["export"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["default"]}," ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["function"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Name"]},"(",{"tag":"span","props":{"class":"hljs-params"}},") "]},"{}"]}]},"\n",{"tag":"p","children":["In comparison, for arrow function, you have to do"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["() =>"]}," {};\n\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["export"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["default"]}," Name;"]}]},"\n",{"tag":"p","children":["But this argument is not relevant if you don’t export the component. And\nsometimes you don’t (or not as the default), unless you have to reuse it."]},"\n",{"tag":"p","children":["Some people say relying on function name inference is not good, because of the\nenvironment may not support it or that it’s harder to grep & sha blah blah. I\ndon’t care about those arguments as we mostly still use babel this days (or at\nleast one transpiler/optimizer) that will handle this for us. This things are\ncovered. We should not have to think about this kind of problem when we use\nmodern syntax. Otherwise we should not even use class or arrow function in the\nfirst place, right?"]},"\n",{"tag":"p","children":["Anyway, I rarely use ",{"tag":"code","children":["function"]}," this days, because it’s long. You can laugh."]},"\n",{"tag":"p","children":[{"tag":"em","children":["Long you said?"]}]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["function"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Name"]},"(",{"tag":"span","props":{"class":"hljs-params"}},") "]},"{}\n",{"tag":"span","props":{"class":"hljs-comment"},"children":["// vs"]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["() =>"]}," {};"]}]},"\n",{"tag":"p","children":["Yeah laugh again. It's good for your health, you are welcome."]},"\n",{"tag":"p","children":["Real thing is: I don't like to use ",{"tag":"code","children":["this."]}," and when we use arrow function we are\nsure that ",{"tag":"code","children":["this"]}," won't be a thing (at least nothing tied to the function body."]},"\n",{"tag":"p","children":["You can see a second win for the ",{"tag":"code","children":["function"]},": hoisting can be helpful if you have\nwrite many components in one file and want to define them in top-to-bottom\norder. But I don’t never had the need to rely on hoisting so it doesn’t matter\nfor me."]},"\n",{"tag":"p","children":["Now let’s have a look to destructuring."]},"\n",{"tag":"h2","props":{"id":"destructured-props"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#destructured-props"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"Destructured ",{"tag":"code","children":["props"]}]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["(",{"tag":"span","props":{"class":"hljs-params"},"children":["{ style, children }"]},") =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{style}"]},">"]},"{children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n};"]}]},"\n",{"tag":"p","children":["This problem is basically not related to React component but more ",{"tag":"em","children":["“how do you\ndefine your arguments in functions”"]},". I will stick to React but this argument\ncan be applied to regular JavaScript functions."]},"\n",{"tag":"p","children":["It’s acceptable when you have 2 or 3 arguments, but quickly can become annoying\nif you have 6 or 8."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["(",{"tag":"span","props":{"class":"hljs-params"},"children":["{\n  style,\n  defaultValue,\n  children,\n  another,\n  andAnother,\n  andAnotherMore,\n  andAnotherChild\n}"]},") =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," computedValue = defaultValue * ",{"tag":"span","props":{"class":"hljs-number"},"children":["10"]}," - ",{"tag":"span","props":{"class":"hljs-number"},"children":["2"]},";\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," (\n    ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{style}"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["another"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{another}"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["andAnother"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{andAnother}"]},">"]},"\n      {children}\n      {andAnotherMore && ",{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]},"{andAnotherChild}",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]},"}\n    ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},"\n  );\n};"]}]},"\n",{"tag":"p","children":["In comparison, if you use ",{"tag":"code","children":["props"]}," argument (could be ",{"tag":"code","children":["args"]}," or ",{"tag":"code","children":["options"]},")"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["props"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," computedValue = props.defaultValue * ",{"tag":"span","props":{"class":"hljs-number"},"children":["10"]}," - ",{"tag":"span","props":{"class":"hljs-number"},"children":["2"]},";\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," (\n    ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},"\n      ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},"\n      ",{"tag":"span","props":{"class":"hljs-attr"},"children":["another"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.another}"]},"\n      ",{"tag":"span","props":{"class":"hljs-attr"},"children":["andAnother"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.andAnother}"]},"\n      ",{"tag":"span","props":{"class":"hljs-attr"},"children":["computedValue"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{computedValue}"]},"\n    >"]},"\n      {props.children}\n      {props.andAnotherMore && ",{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]},"{props.andAnotherChild}",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]},"}\n    ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},"\n  );\n};"]}]},"\n",{"tag":"p","children":["You end up with less lines. Some find the destructured syntax noizy. ",{"tag":"code","children":["props"]},"\nalways have the same length and make it clear that your value comes as the\ncomponent input. That’s why I prefer to stay consistent and use ",{"tag":"code","children":["props"]}," all the\ntime."]},"\n",{"tag":"p","children":["Some people will say that using destructuring helps to see the accepted props.\nThat’s true if you don’t use propTypes or flow annotations. I personally\nrecommend flow (...if you have to do JavaScript - hello\n",{"tag":"a","props":{"href":"https://reasonml.github.io/"},"children":["Reason"]},") so my components might look like this:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":["type props = {|\n  style: any,\n  ",{"tag":"span","props":{"class":"hljs-attr"},"children":["children"]},": React.Node\n|};\n\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["(",{"tag":"span","props":{"class":"hljs-params"},"children":["props: props"]},") =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n};"]}]},"\n",{"tag":"p","children":["Here you see upfront the accepted arguments, ",{"tag":"strong","children":["and their types"]},". Way better in\nmy opinion."]},"\n",{"tag":"p","children":["And if you avoid defining your type before, and inline it... And add to that\ndestructuring... Well, hello repetition."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":["(",{"tag":"span","props":{"class":"hljs-params"},"children":["{ style, children }: {| style: any, children: React.Node |}"]},") =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{style}"]},">"]},"{children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n};"]}]},"\n",{"tag":"p","children":["Now classes."]},"\n",{"tag":"h2","props":{"id":"classes"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#classes"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},{"tag":"code","children":["Classes"]}]},"\n",{"tag":"p","children":["I know, if you think ",{"tag":"code","children":["classes"]},", you think \"stateful\". But that's not an\nobligation."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-class"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["class"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Name"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["extends"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["React"]},".",{"tag":"span","props":{"class":"hljs-title"},"children":["Component"]}," "]},"{\n  ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-title"},"children":["render"]},"(",{"tag":"span","props":{"class":"hljs-params"}},")"]}," {\n    ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{this.props.style}"]},">"]},"{this.props.children}",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["div"]},">"]}]},";\n  }\n}"]}]},"\n",{"tag":"p","children":["That's ok too. A bit verbose, but extensible. That said, I am always trying to\navoid using ",{"tag":"code","children":["this"]}," in JavaScript just because I like functional things."]},"\n",{"tag":"p","children":["Well, you could do"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-class"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["class"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Name"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["extends"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["React"]},".",{"tag":"span","props":{"class":"hljs-title"},"children":["Component"]}," "]},"{\n  ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-title"},"children":["render"]},"(",{"tag":"span","props":{"class":"hljs-params"}},")"]}," {\n    ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," { props } = ",{"tag":"span","props":{"class":"hljs-built_in"},"children":["this"]},"\n    ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["div"]},">"]}]},";\n  }\n}"]}]},"\n",{"tag":"p","children":["But now it’s starting to be a bit more verbose compared to the initial example.\nThat’s why I prefer to use functions whenever I can. That’s why they have been\naccepted as React components by the way."]},"\n",{"tag":"p","children":["Some people might think that classes (especially ",{"tag":"code","children":["PureComponent"]},") are better\nsince React can optimise more easily this component lifecycle. But if that’s the\ncase, we could probably imagine a babel transformation that does it for us,\nright?"]},"\n",{"tag":"p","children":["Now let’s take a look to the minimal example without any return statement."]},"\n",{"tag":"h2","props":{"id":"no-return"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#no-return"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"No ",{"tag":"code","children":["return"]}]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["props"]}," =>"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";"]}]},"\n",{"tag":"p","children":["Yeah that’s definitely shorter. Sometime I do that, but as soon as I have to\ncompute something, or add a condition, I switch to explicit return statement.\nBecause when you want to add computations, breakpoints, logs etc, you can’t do\nthat easily without return statement. You can’t inject a computation (except\ninline maybe - but I am not a one liner guy anymore). It can become annoying to\nhave to edit the component wrapper to add the return statement. That’s why I\nprefer to always have it. For consitency."]},"\n",{"tag":"p","children":["I don’t really want to talk about this unnamed version"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["export"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["default"]}," props => ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";"]}]},"\n",{"tag":"p","children":["Clearly fun and concise, but not good for actual debugging for the same reasons\nas the previous example."]},"\n",{"tag":"p","children":["That’s why I like to end up with something like this:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Name = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["props"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["style"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{props.style}"]},">"]},"{props.children}>",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["View"]},">"]}]},";\n};"]}]},"\n",{"tag":"p","children":["But again, ",{"tag":"em","children":["it doesn’t really matter"]},". If you are not consistent in your\ncodebase about this ",{"tag":"em","children":["it’s totally fine"]},"."]},"\n",{"tag":"p","children":["And never forget to ",{"tag":"em","children":["never put all your eggs in the same basket."]}]}]}}