{"title":"Arrow functions in ES6/ES2015","headings":[{"level":2,"text":"Arrow functions don’t have a this","id":"arrow-functions-dont-have-a-this"},{"level":2,"text":"Note about expression body and Object","id":"note-about-expression-body-and-object"},{"level":2,"text":"Conclusion","id":"conclusion"}],"date":"2015-12-15T00:00:00.000Z","tags":["JavaScript","ES2015"],"body":{"tag":"div","children":[{"tag":"p","children":["ES2015 brings us some new syntax sugar that will likely make you stop using\n",{"tag":"code","children":["Function.prototype.bind()"]},"."]},"\n",{"tag":"p","children":["Arrow functions are just a function shorthand using the ",{"tag":"code","children":["=>"]}," syntax."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-comment"},"children":["// es5"]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["var"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["function"]},"(",{"tag":"span","props":{"class":"hljs-params"},"children":["x"]},") "]},"{\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";\n};\n\n",{"tag":"span","props":{"class":"hljs-comment"},"children":["// es6"]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";\n};"]}]},"\n",{"tag":"p","children":["Arrow functions are syntactically similar to the related feature that exists in\nother languages like CoffeeScript, Java (8+), C#…"]},"\n",{"tag":"p","children":["They support both expression and statement bodies. In our example above, we have\nseen a classic statement. But for simple function, we can use an simple\nexpression, to make things shorter. That means that the previous example can be\nalso written like this:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";"]}]},"\n",{"tag":"p","children":["Note that when you have only one argument, you can omit parenthesis around it.\nSo we can also wrote the example like this"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";"]}]},"\n",{"tag":"p","children":["And you can also wrap the body in parenthesis if you want to make a multiline\nexpression"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},"; ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// that can be multilines, you can imagine some JSX here ;)"]}]}]},"\n",{"tag":"p","children":["So this examples are all the same :"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";\n};\n",{"tag":"span","props":{"class":"hljs-comment"},"children":["// ==="]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";\n",{"tag":"span","props":{"class":"hljs-comment"},"children":["// ==="]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";\n",{"tag":"span","props":{"class":"hljs-comment"},"children":["// ==="]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," myFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["x"]}," =>"]}," x + ",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},";"]}]},"\n",{"tag":"p","children":["In practice you will use this small functions in method like Array\nreduce/filter/map etc."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," nums = [",{"tag":"span","props":{"class":"hljs-number"},"children":["1"]},", ",{"tag":"span","props":{"class":"hljs-number"},"children":["2"]},", ",{"tag":"span","props":{"class":"hljs-number"},"children":["3"]},", ",{"tag":"span","props":{"class":"hljs-number"},"children":["4"]},", ",{"tag":"span","props":{"class":"hljs-number"},"children":["5"]},"];\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," odds = nums.filter(",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["v"]}," =>"]}," v % ",{"tag":"span","props":{"class":"hljs-number"},"children":["2"]},"); ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// [1, 3, 5]"]},"\n",{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," oddsSum = odds.reduce(",{"tag":"span","props":{"class":"hljs-function"},"children":["(",{"tag":"span","props":{"class":"hljs-params"},"children":["sum, v"]},") =>"]}," sum + v, ",{"tag":"span","props":{"class":"hljs-number"},"children":["0"]},"); ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// 9"]}]}]},"\n",{"tag":"h2","props":{"id":"arrow-functions-dont-have-a-this"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#arrow-functions-dont-have-a-this"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"Arrow functions don’t have a ",{"tag":"code","children":["this"]}]},"\n",{"tag":"p","children":["Yes your read correctly: unlike functions, arrows function share the same\nlexical this as their surrounding code. So that means the ",{"tag":"code","children":["this"]}," you might use\nuse in the body of an arrow function refer to the parent scope:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," Someone = {\n  ",{"tag":"span","props":{"class":"hljs-attr"},"children":["name"]},": “MoOx”,\n  ",{"tag":"span","props":{"class":"hljs-attr"},"children":["friends"]},": [], ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// he got no friends atm :("]},"\n  ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-title"},"children":["printFriends"]},"(",{"tag":"span","props":{"class":"hljs-params"}},")"]}," {\n    ",{"tag":"span","props":{"class":"hljs-built_in"},"children":["this"]},"._friends.forEach(",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["f"]}," =>"]},"\n      ",{"tag":"span","props":{"class":"hljs-built_in"},"children":["console"]},".log(",{"tag":"span","props":{"class":"hljs-built_in"},"children":["this"]},"._name + ",{"tag":"span","props":{"class":"hljs-string"},"children":["\" knows \""]}," + f)\n      ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// `this` is not the function of the forEach !"]},"\n    )\n  }\n}"]}]},"\n",{"tag":"p","children":["By reading this code, you might understand that you are likely to stop using\n",{"tag":"code","children":["bind()"]},":"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["import"]}," React, { Component } ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["from"]}," “react”\n",{"tag":"span","props":{"class":"hljs-class"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["class"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Stuff"]}," ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["extends"]}," ",{"tag":"span","props":{"class":"hljs-title"},"children":["Component"]}," "]},"{\n\n  ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// old way"]},"\n  ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-title"},"children":["onClick"]},"(",{"tag":"span","props":{"class":"hljs-params"},"children":["e"]},")"]}," {\n    ",{"tag":"span","props":{"class":"hljs-built_in"},"children":["this"]},".setState({ ",{"tag":"span","props":{"class":"hljs-attr"},"children":["omg"]},": ",{"tag":"span","props":{"class":"hljs-literal"},"children":["false"]}," })\n  }\n\n  ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-title"},"children":["render"]},"(",{"tag":"span","props":{"class":"hljs-params"}},")"]}," {\n    ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," (\n      ",{"tag":"span","props":{"class":"xml"},"children":[{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["div"]},">"]},"\n        { /* old way */ }\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["onClick"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["this.onClick.bind"]},"(",{"tag":"span","props":{"class":"hljs-attr"},"children":["this"]},") }>"]},"\n          Old binded call\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]},">"]},"\n\n        { /* LOOK MA', NO BIND ! */ }\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["onClick"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{"]}," (",{"tag":"span","props":{"class":"hljs-attr"},"children":["e"]},") =>"]}," this.onClick(e) }>\n          I don’t need `bind` anymore !\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]},">"]},"\n\n        { /* Simpler way */ }\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["<",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]}," ",{"tag":"span","props":{"class":"hljs-attr"},"children":["onClick"]},"=",{"tag":"span","props":{"class":"hljs-string"},"children":["{"]}," (",{"tag":"span","props":{"class":"hljs-attr"},"children":["e"]},") =>"]}," this.setState({ omg: true }) }>\n          Hell yeah\n        ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["button"]},">"]},"\n      ",{"tag":"span","props":{"class":"hljs-tag"},"children":["</",{"tag":"span","props":{"class":"hljs-name"},"children":["div"]},">"]}]},"\n    )\n  }\n}"]}]},"\n",{"tag":"h2","props":{"id":"note-about-expression-body-and-object"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#note-about-expression-body-and-object"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"Note about expression body and Object"]},"\n",{"tag":"p","children":["If you want to return an object you might be surprised to get ",{"tag":"code","children":["undefined"]}," with\nthis code:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," aFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["obj"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-attr"},"children":["key"]},": obj.value;\n};"]}]},"\n",{"tag":"p","children":["Indeed the above snippet could be translated into ES5 this way:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["var"]}," aFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["function"]},"(",{"tag":"span","props":{"class":"hljs-params"},"children":["obj"]},") "]},"{\n  ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// Defines a label named `key`"]},"\n  ",{"tag":"span","props":{"class":"hljs-attr"},"children":["key"]},": obj.value; ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// Gets `obj.value`"]},"\n  ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// Implicit returns `undefined`"]},"\n};"]}]},"\n",{"tag":"p","children":["Keep in mind that in this context, a brace is to start a statement body, not an\nobject. So you will need this:"]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," aFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["obj"]}," =>"]}," {\n  ",{"tag":"span","props":{"class":"hljs-keyword"},"children":["return"]}," { ",{"tag":"span","props":{"class":"hljs-attr"},"children":["key"]},": obj.value };\n};"]}]},"\n",{"tag":"p","children":["But wait, there is a trick: a stupid couple of parenthesis."]},"\n",{"tag":"pre","children":[{"tag":"code","props":{"class":"hljs language-js"},"children":[{"tag":"span","props":{"class":"hljs-keyword"},"children":["const"]}," aFn = ",{"tag":"span","props":{"class":"hljs-function"},"children":[{"tag":"span","props":{"class":"hljs-params"},"children":["obj"]}," =>"]}," ({ ",{"tag":"span","props":{"class":"hljs-attr"},"children":["key"]},": obj.value }); ",{"tag":"span","props":{"class":"hljs-comment"},"children":["// It works!"]}]}]},"\n",{"tag":"h2","props":{"id":"conclusion"},"children":[{"tag":"a","props":{"aria-hidden":"true","href":"#conclusion"},"children":[{"tag":"span","props":{"class":"icon icon-link"}}]},"Conclusion"]},"\n",{"tag":"p","children":["Take a look to the\n",{"tag":"a","props":{"href":"https://kangax.github.io/compat-table/es6/#test-arrow_functions"},"children":["compatibility table"]},".\nYou will see that arrow functions are already supported by most browsers but you\nmight need ",{"tag":"a","props":{"href":"http://babeljs.io"},"children":["Babel"]}," to use it today."]},"\n",{"tag":"p","children":["You will probably use this more and more. Even if ",{"tag":"code","children":["function"]}," keyword is not\ndead, arrow functions ",{"tag":"code","children":["=>"]}," are probably going to be a thing !"]}]}}